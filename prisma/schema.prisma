// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
}

enum Sex {
  MALE
  FEMALE
}

model User {
  id            String    @id @default(cuid())
  name          String
  fbUid         String @unique
  iconImageFileKey String?
  role          Role?
  sex           Sex?
  age           Int?
  startedAt     DateTime?
  description   String? @db.Text
  twitter       String?
  instagram     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userGameTypes UserGameType[]
  recruits Recruit[]
  commentsToRecruit CommentToRecruit[]
  userStrongAreas UserStrongArea[]
}

model GameType {
  id String    @id @default(cuid())
  name String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userGameTypes UserGameType[]
  eventGameTypes EventGameType[]
}

enum LikeOrDislike {
  LIKE
  DISLIKE
}

model UserGameType {
  id String    @id @default(cuid())
  likeOrDislike LikeOrDislike
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  gameType GameType @relation(fields: [gameTypeId], references: [id], onDelete: Cascade)
  gameTypeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gameTypeId])
}

model StrongArea {
  id String    @id @default(cuid())
  name String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userStrongAreas UserStrongArea[]
}

model UserStrongArea {
  id String    @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  strongArea StrongArea @relation(fields: [strongAreaId], references: [id], onDelete: Cascade)
  strongAreaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, strongAreaId])
}


model Organization {
  id String    @id @default(cuid())
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]
}

model Event {
  id String @id @default(cuid())
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  name String @unique
  description String? @db.Text
  sourceUrl String?
  coverImageFileKey String?
  numberOfPeopleInTeam String?
  timeRequired String?
  twitterTag String? // #コナン脱出、など
  twitterContentTag String? // #コナン、とかIP自体にひもづくタグ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventLocations EventLocation[]
  eventGameTypes EventGameType[]
}

model EventGameType {
  id String @id @default(cuid())
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  gameType GameType @relation(fields: [gameTypeId], references: [id], onDelete: Cascade)
  gameTypeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, gameTypeId])
}

model Prefecture {
  id String @id @default(cuid())
  name String @unique
  sort Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations Location[]
}

model Location {
  id String @id @default(cuid())
  name String
  prefecture Prefecture @relation(fields: [prefectureId], references: [id], onDelete: Cascade)
  prefectureId String
  color String?
  bgColor String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventLocations EventLocation[]

  @@unique([prefectureId, name])
}

model EventLocation {
  id String @id @default(cuid())
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
  building String?
  description String? @db.Text // location.nameがothersの時や開催日時が不明確の場合に、書き入れる
  startedAt DateTime?
  endedAt DateTime?
  detailedSchedule String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recruits Recruit[]
}

model Recruit {
  id String @id @default(cuid())
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
  manualEventName String? // eventLocationIdがない場合に記入
  manualLocation String? // eventLocationIdがない場合に記入
  eventLocation EventLocation? @relation(fields: [eventLocationId], references: [id], onDelete: Cascade)
  eventLocationId String?
  numberOfPeople Int? // 募集人数
  description String? @db.Text 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commentsToRecruit CommentToRecruit[]
  possibleDates PossibleDate[]
  recruitTagRecruits RecruitTagRecruit[]
}

model RecruitTag {
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recruitTagRecruits RecruitTagRecruit[]
}

model RecruitTagRecruit {
  id String @id @default(cuid())
  recruit Recruit @relation(fields: [recruitId], references: [id], onDelete: Cascade)
  recruitId String
  recruitTag RecruitTag @relation(fields: [recruitTagId], references: [id], onDelete: Cascade)
  recruitTagId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([recruitId, recruitTagId])
}

model PossibleDate {
  id String @id @default(cuid())
  date DateTime
  priority Int
  recruit Recruit @relation(fields: [recruitId], references: [id], onDelete: Cascade)
  recruitId String
  hours String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentToRecruit {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  recruit Recruit @relation(fields: [recruitId], references: [id], onDelete: Cascade)
  recruitId String
  message String @db.Text 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}